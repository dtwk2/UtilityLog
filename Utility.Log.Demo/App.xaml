<Application
    x:Class="Utility.Log.Demo.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:demo="clr-namespace:Utility.Log.Demo">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>

                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Indigo.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Pink.xaml" />

                <ResourceDictionary Source="pack://application:,,,/Utility.Log.View;component/Themes/Generic.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/Utility.Controls;component/Themes/Generic.xaml"/>

                <ResourceDictionary Source="pack://application:,,,/MaterialDesignExtensions;component/Themes/Generic.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignExtensions;component/Themes/MaterialDesignLightTheme.xaml" />

            </ResourceDictionary.MergedDictionaries>


            <!--  MahApps Brushes  -->
            <SolidColorBrush x:Key="HighlightBrush" Color="{DynamicResource Primary700}" />
            <SolidColorBrush x:Key="AccentColorBrush" Color="{DynamicResource Primary500}" />
            <SolidColorBrush x:Key="AccentColorBrush2" Color="{DynamicResource Primary400}" />
            <SolidColorBrush x:Key="AccentColorBrush3" Color="{DynamicResource Primary300}" />
            <SolidColorBrush x:Key="AccentColorBrush4" Color="{DynamicResource Primary200}" />
            <SolidColorBrush x:Key="WindowTitleColorBrush" Color="{DynamicResource Primary700}" />
            <SolidColorBrush x:Key="AccentSelectedColorBrush" Color="{DynamicResource Primary500Foreground}" />
            <LinearGradientBrush x:Key="ProgressBrush" StartPoint="1.002,0.5" EndPoint="0.001,0.5">
                <GradientStop Offset="0" Color="{DynamicResource Primary700}" />
                <GradientStop Offset="1" Color="{DynamicResource Primary300}" />
            </LinearGradientBrush>
            <SolidColorBrush x:Key="CheckmarkFill" Color="{DynamicResource Primary500}" />
            <SolidColorBrush x:Key="RightArrowFill" Color="{DynamicResource Primary500}" />
            <SolidColorBrush x:Key="IdealForegroundColorBrush" Color="{DynamicResource Primary500Foreground}" />
            <SolidColorBrush
                x:Key="IdealForegroundDisabledBrush"
                Opacity="0.4"
                Color="{DynamicResource Primary500}" />

            <SolidColorBrush x:Key="MaterialDesignFlatButtonClick" Color="#10000000" />
            <SolidColorBrush x:Key="SecondaryAccentForegroundBrush" Color="#FFFFFFFF" />

            <Style TargetType="{x:Type Separator}">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignDivider}" />
            </Style>


            <Style TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignTextBlock}" >

            </Style>


            <Style x:Key="MaterialDesignRepeatButton" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Rectangle Fill="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <SineEase x:Key="SineEaseOut" EasingMode="EaseOut" />

         
            <demo:BooleanAllConverter x:Key="BooleanAllConverter" />


            <ControlTemplate x:Key="MaterialDesignSliderThumb2" TargetType="{x:Type Thumb}">
                <ControlTemplate.Resources>
                    <Storyboard x:Key="ShowFocusVisualStoryboard">
                        <DoubleAnimation Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity" To="0.15" Duration="0" />
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                    <Storyboard x:Key="HideFocusVisualStoryboard">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="Opacity">
                            <EasingDoubleKeyFrame KeyTime="0:0:0" Value="0.15" />
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                <EasingDoubleKeyFrame.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </EasingDoubleKeyFrame.EasingFunction>
                            </EasingDoubleKeyFrame>
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="focusedHalo" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                            <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" />
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </ControlTemplate.Resources>
                <Grid x:Name="thumbGrid" Height="20" Width="18">
                    <Ellipse
                x:Name="halo"
                Width="28"
                Height="28"
                Margin="-24"
                Fill="{TemplateBinding Foreground}"
                Opacity="0" />
                    <!--<Ellipse
                x:Name="focusedHalo"
                Width="28"
                Height="28"
                Margin="-24"
                Fill="{TemplateBinding Foreground}"
                Opacity="0.15"
                RenderTransformOrigin="0.5,0.5">
                    <Ellipse.RenderTransform>
                            <ScaleTransform ScaleX="0" ScaleY="0" />
                        </Ellipse.RenderTransform>
                    </Ellipse>-->
                    <!--<Ellipse x:Name="MainEllipse2"  Height="40" Width="28"      Margin="-24"       Fill="{TemplateBinding Foreground}"  RenderTransformOrigin="0.5 0.5"  />-->
                    <Ellipse x:Name="MainEllipse"  Height="40" Width="28"      Margin="-24"       Fill="{TemplateBinding Foreground}"  RenderTransformOrigin="0.5 0.5"  >
                        <!--HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"-->
                        <Ellipse.OpacityMask>
                            <RadialGradientBrush>
                                <GradientStop Offset="0" Color="Transparent" />
                                <GradientStop Offset="1" Color="Black" />
                            </RadialGradientBrush>
                        </Ellipse.OpacityMask>
                        <Ellipse.RenderTransform>
                            <ScaleTransform />
                        </Ellipse.RenderTransform>
                        <Ellipse.Triggers>
                <EventTrigger RoutedEvent="Loaded">
                    <BeginStoryboard>
                        <Storyboard DesiredFrameRate="20" RepeatBehavior="Forever" TargetName="MainEllipse" >
                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" BeginTime="0" Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}" />
                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" BeginTime="0" Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}" />
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" BeginTime="0" Duration="0:0:1" From="1" To="0" EasingFunction="{StaticResource SineEaseOut}" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Ellipse.Triggers>
                    </Ellipse>

                    <AdornerDecorator>
                        <AdornerDecorator.CacheMode>
                            <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </AdornerDecorator.CacheMode>
                        <Ellipse
                    x:Name="grip"
                    Fill="{TemplateBinding Foreground}"
                    Margin="-1,0" />
                        
                    </AdornerDecorator>
                    <!--Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Slider}, Path=(wpf:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}"-->

                </Grid>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType=Track}}" Value="{x:Static Orientation.Vertical}">
                        <Setter TargetName="thumbGrid" Property="Height" Value="18" />
                        <Setter TargetName="thumbGrid" Property="Width" Value="20" />
                        <Setter TargetName="grip" Property="Margin" Value="0,-1" />
                    </DataTrigger>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="0.15" Duration="0:0:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="halo" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                    <DataTrigger Value="True">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource BooleanAllConverter}">
                                <Binding Path="IsFocused" RelativeSource="{RelativeSource FindAncestor, AncestorType=Slider}" />
                                <!--<Binding Path="(wpf:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Slider}" Converter="{StaticResource InvertBooleanConverter}"  />-->
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <DataTrigger.EnterActions>
                            <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                    <!--<DataTrigger Value="True">
                        --><!--<DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource BooleanAllConverter}">
                                <Binding Path="IsDragging" RelativeSource="{RelativeSource Self}" />
                                --><!--<Binding Path="(wpf:SliderAssist.OnlyShowFocusVisualWhileDragging)" RelativeSource="{RelativeSource FindAncestor, AncestorType=Slider}" />--><!--
                            </MultiBinding>
                        </DataTrigger.Binding>--><!--
                        <DataTrigger.EnterActions>
                            <BeginStoryboard Storyboard="{StaticResource ShowFocusVisualStoryboard}" />
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard Storyboard="{StaticResource HideFocusVisualStoryboard}" />
                        </DataTrigger.ExitActions>
                    </DataTrigger>-->
                </ControlTemplate.Triggers>
            </ControlTemplate>


            <ControlTemplate x:Key="MaterialDesignSliderHorizontal2" TargetType="{x:Type Slider}">
    
                <Border
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            SnapsToDevicePixels="True"
            UseLayoutRounding="True">
                    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed" />
                        <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                        <Rectangle Grid.Row="1" Fill="{TemplateBinding Foreground}" Height="4" Opacity="0.38" VerticalAlignment="Center" RadiusX="2" RadiusY="2" />
                        <Border
                    x:Name="activeTrack"
                    Grid.Row="1"
                    Background="{TemplateBinding Foreground}"
                    CornerRadius="3,0,0,3"
                    Height="6"
                    Width="{Binding DecreaseRepeatButton.ActualWidth, ElementName=PART_Track}"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center" />
                        <!--  Selection range must be wrapped in a Canvas for the position to be updated correctly  -->
                        <Canvas Grid.Row="1" VerticalAlignment="Center" Height="6">
                            <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="6" RadiusX="2" RadiusY="2" Visibility="Collapsed" />
                        </Canvas>
                        <Track x:Name="PART_Track" Grid.Row="1" Height="20">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource MaterialDesignRepeatButton}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource MaterialDesignRepeatButton}" />
                            </Track.IncreaseRepeatButton>
                            <!--  It's important that the Thumb gets added last in the XAML to make sure it is drawn on top of both repeat buttons  -->
                            <Track.Thumb>
                                <Thumb Template="{StaticResource MaterialDesignSliderThumb2}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="TickPlacement" Value="TopLeft">
                        <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="BottomRight">
                        <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="TickPlacement" Value="Both">
                        <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                        <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsSelectionRangeEnabled" Value="true">
                        <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsDirectionReversed" Value="True">
                        <Setter TargetName="activeTrack" Property="CornerRadius" Value="0,3,3,0" />
                        <Setter TargetName="activeTrack" Property="HorizontalAlignment" Value="Right" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

        </ResourceDictionary>
    </Application.Resources>
</Application>